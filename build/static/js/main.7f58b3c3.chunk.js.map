{"version":3,"sources":["assetts/loading2.gif","services/serviceHelper.js","components/Giphys.jsx","components/Search.jsx","services/giphyService.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","console","log","process","onGlobalSuccess","response","data","onGlobalError","err","Promise","reject","Giphy","giphyResults","map","index","images","title","rating","trending_datetime","key","Card","className","CardImg","top","width","src","downsized_medium","url","alt","CardBody","CardTitle","CardSubtitle","toUpperCase","CardText","Date","toDateString","Search","useState","giphys","setGiphys","isLoading","setIsLoading","onSearchSuccess","result","length","noResults","Swal","fire","text","icon","confirmButtonText","onSearchError","error","Container","id","initialValues","query","onSubmit","values","setSubmitting","config","method","headers","axios","then","catch","searchGiphys","isSubmitting","Row","Col","md","component","Input","type","name","placeholder","Button","disabled","require","Giphys","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.7f58b3c3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/loading2.8e174af8.gif\";","const GIPHY_API_KEY = process.env.REACT_APP_GIPHY_API_KEY;\nconst API_HOST_PREFIX = process.env.REACT_APP_API_HOST_PREFIX;\n\nconsole.log(\"host\", API_HOST_PREFIX);\nconsole.log(\"api key\", GIPHY_API_KEY);\n\nconst onGlobalSuccess = (response) => {\n  return response.data;\n};\n\nconst onGlobalError = (err) => {\n  return Promise.reject(err);\n};\n\nexport { onGlobalError, onGlobalSuccess, GIPHY_API_KEY, API_HOST_PREFIX };\n","import React from \"react\";\nimport {\n  Card,\n  CardImg,\n  CardBody,\n  CardTitle,\n  CardText,\n  CardSubtitle,\n} from \"reactstrap\";\n\nconst Giphy = ({ giphyResults }) => {\n  return (\n    <div>\n      {giphyResults &&\n        giphyResults.map(\n          ({ images, title, rating, trending_datetime }, index) => (\n            <div key={index}>\n              <Card className=\"mb-2\">\n                <CardImg\n                  top\n                  width=\"100%\"\n                  src={images.downsized_medium.url}\n                  alt=\"Card image cap\"\n                />\n                <CardBody>\n                  <CardTitle>Title: {title}</CardTitle>\n                  <CardSubtitle>Rating: {rating.toUpperCase()}</CardSubtitle>\n                  <CardText>\n                    Last Trending On:{\" \"}\n                    {trending_datetime === \"1970-01-01 00:00:00\" ? (\n                      <i>Never Trending</i>\n                    ) : (\n                      new Date(trending_datetime).toDateString()\n                    )}\n                  </CardText>\n                </CardBody>\n              </Card>\n            </div>\n          )\n        )}\n    </div>\n  );\n};\n\nexport default Giphy;\n","import React, { useState } from \"react\";\nimport { Formik, Field, Form } from \"formik\";\nimport { searchGiphys } from \"../services/giphyService\";\nimport Giphys from \"./Giphys\";\nimport { Container, Col, Row, Button, Input } from \"reactstrap\";\nimport Swal from \"sweetalert2\";\n\nconst Search = () => {\n  const [giphys, setGiphys] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n\n  const onSearchSuccess = (result) => {\n    setIsLoading(false);\n    if (result.data.length < 1) {\n      noResults();\n    } else {\n      setGiphys(result.data);\n    }\n  };\n\n  const noResults = () => {\n    Swal.fire({\n      title: \"There's been an error!\",\n      text:\n        \"Sorry, there are no results to display. Please adjust your search term!\",\n      icon: \"info\",\n      confirmButtonText: \"Okay, Search again!\",\n    });\n  };\n\n  const onSearchError = (error) => {\n    Swal.fire({\n      title: \"Sorry, we have an error!\",\n      text: error,\n      icon: \"error\",\n      confirmButtonText: \"Close Warning\",\n    });\n  };\n\n  return (\n    <Container>\n      <div id=\"formik-giph-search\" className=\"mb-4\">\n        <Formik\n          initialValues={{ query: \"\" }}\n          onSubmit={(values, { setSubmitting }) => {\n            searchGiphys(values.query)\n              .then(setIsLoading(true))\n              .then(onSearchSuccess)\n              .then(setSubmitting(false))\n              .catch(onSearchError);\n          }}\n        >\n          {({ isSubmitting }) => (\n            <Form>\n              <Row className=\"justify-content-center mb-2\">\n                <Col md={8}>\n                  <Field\n                    component={Input}\n                    type=\"text\"\n                    name=\"query\"\n                    id=\"giph-search-query\"\n                    placeholder=\"Search For You're favorite Giphys\"\n                  />\n                </Col>\n              </Row>\n              <Row className=\"justify-content-center\">\n                <Button\n                  type=\"submit\"\n                  className=\"btn btn-primary \"\n                  disabled={isSubmitting}\n                >\n                  Submit Search\n                </Button>\n              </Row>\n            </Form>\n          )}\n        </Formik>\n      </div>\n      <div id=\"giph-results\">\n        <Row>\n          <Col>\n            {isLoading === true ? (\n              <img src={require(\"../assetts/loading2.gif\")} alt=\"Loading...\" />\n            ) : (\n              <Giphys giphyResults={giphys} />\n            )}\n          </Col>\n        </Row>\n      </div>\n    </Container>\n  );\n};\n\nexport default Search;\n","import axios from \"axios\";\nimport {\n  onGlobalSuccess,\n  onGlobalError,\n  GIPHY_API_KEY,\n  API_HOST_PREFIX,\n} from \"./serviceHelper\";\n\nconst baseUrl = API_HOST_PREFIX;\nconst key = GIPHY_API_KEY;\n\nlet searchGiphys = (query) => {\n  const config = {\n    method: \"GET\",\n    url: baseUrl + `?api_keys=${key}&q=${query}`,\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n  };\n  return axios(config).then(onGlobalSuccess).catch(onGlobalError);\n};\n\nexport { searchGiphys };\n","import React from \"react\";\nimport GiphSearch from \"./components/Search\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header>\n        <h1 className='text-center'>Search Giphs</h1>\n      </header>\n      <GiphSearch />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}